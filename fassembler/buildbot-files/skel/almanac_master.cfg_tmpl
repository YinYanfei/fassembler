# -*- mode: python ;-*-
from buildbot.changes.pb import PBChangeSource
from buildbot.changes.svnpoller import SVNPoller
from buildbot.process import factory
from buildbot.steps.shell import ShellCommand
from buildbot.steps.source import SVN
from buildbot.status import html, mail, words
from buildbot import scheduler
from buildbot.buildslave import BuildSlave
from twisted.python import log

import os
import subprocess

"""Buildbot master configuration for the Almanac.

{{config.editwarning}}
"""


BASEPORT=int('{{config.child_baseport}}')  # Used for the fassembler builds
ALMANAC_BASEDIR='{{config.basedir}}'

# All the ports we care about... hacky
almanac_ports =  range(BASEPORT, BASEPORT + 11)  # for the opencore trunk build.


slavenames = ['slave1']
slaves = [BuildSlave(name, '{{config.buildbot_passwd}}') for name in slavenames]

c = BuildmasterConfig = {}
# "The BuildmasterConfig name is the only one which matters: all other
# names defined during the execution of this file are discarded."
# (from http://buildbot.net/repos/release/docs/buildbot.html#Configuration)
				   
c['projectName'] = 'Orton Almanac'
c['projectURL']  = 'http://projects.opengeo.org/almanac/'
c['buildbotURL'] = '{{config.buildbot_url}}'

c['slavePortnum'] = int('{{config.buildslave_port}}')

SVNURL = 'https://svn.opengeo.org/almanac/'

c['change_source'] = [
    SVNPoller(svnurl=SVNURL, pollinterval=180)
]

# Build slaves that are allowed to attach.
c['slaves'] = slaves


#########################################################################
# FACTORIES - these configure how to build stuff.
#########################################################################

class ToppShellCommand(ShellCommand):

    def __init__(self, *args, **kw):
        # Force colorization off in fassembler child processes.
        # Do that by forcing these env vars blank.
        # (actually it's cmdutils, used by fassembler, that checks these).
        # But on principle, we still allow the user to override this.
        kw.setdefault('env', {})
        kw['env'].setdefault('LSCOLORS', '')
        kw['env'].setdefault('LS_COLORS', '')
        kw['env'].setdefault('COLORTERM', '')
        kw['env'].setdefault('CLICOLOR', '')
        ShellCommand.__init__(self, *args, **kw)
    
    # Print something not so stupid as "shell_9" when there are
    # problems.  It was pretty time-consuming to figure out where
    # in buildbot this happens.
    def getText2(self, cmd, results):
        # XXX maybe report a failure count?
        # see comments in buildbot/process/buildstep.py around line 1004.
        return self.describe(done=True)

    @property
    def descriptionDone(self):
        # Writing out two separate descriptions is too much work.
        return self.description

class ToppShellScript(ToppShellCommand):

    """Given source text of a bash script, run it on the build
    slave."""

    def __init__(self, *args, **kw):
        """
        Needs a 'sourcetext' keyword arg, and optionally 'scriptargs'
        (a single string of all arguments, which should already be
        quoted as necessary).
        """
        commandvars = kw.copy()
        commandvars.setdefault('scriptargs', '')
        commandvars['delim'] = '__123_END_OF_SCRIPT_123__'
        # This works as expected, and seems pretty safe against quote
        # issues and the like.  Uses a somewhat obscure bash trick: a
        # here document with disabled param substitution (by
        # single-quoting the delimiter).
        command = "cat <<'%(delim)s' | bash -s %(scriptargs)s\n%(sourcetext)s\n%(delim)s\n" % commandvars
        kw['command'] = command
        ToppShellCommand.__init__(self, *args, **kw)


def make_factory(name, repo, baseport=BASEPORT,
                 ports=[]):
    # XXX this function probably doesn't need to exist anymore.
    basedir = ALMANAC_BASEDIR
    fac = factory.BuildFactory()
    fac.name = name
    # Accept certificates (for svn).
    fac.addStep(ToppShellScript,
                sourcetext='yes p | svn ls %s' % repo,
                description=['accept svn certs',],
                )

    # Clean up after previous runs.
    if ports:
        baseport = ports[0]
        # For some reason, portkill seems to always exit 1, so ignore "failures".
        # And for some reason, it sometimes doesn't really work, so
        # let's just stupidly bludgeon those ports do death.
        portstring = ' '.join([str(port) for port in ports])
        killscript="""
        KILLER=\"{{os.path.join('..', '..', 'bin', 'portkill')}} -v -s 5 %s\"
        $KILLER
        sleep 2
        $KILLER
        """ % portstring
        fac.addStep(ToppShellScript, sourcetext=killscript,
                    description=['kill any running', 'instances using',
                                 'the ports'],
                    haltOnFailure=False, flunkOnFailure=False)

    fac.addStep(ToppShellCommand, command="time rm -rf %s *bz2 *gz *zip" % basedir,
                description='remove old files',
                haltOnFailure=False, flunkOnFailure=False
                )

    # XXX Bootstrap a virtualenv, and bootstrap the buildout within it.
    venv_script = """
    uname -m | grep 64
    if [ $? -eq 0 ]; then PY=python2.4; else PY=python; fi
    virtualenv --python=$PY %(basedir)s
    cd %(basedir)s
    source bin/activate
    svn co %(repo)s AlmanacStack
    cd AlmanacStack
    python bootstrap.py
    """ % locals()
    fac.addStep(ToppShellScript, sourcetext=venv_script,
                description = ['Bootstrap', 'build', 'environment'],
                haltOnFailure=True)

    buildout_script = """
    cd %(basedir)s
    source bin/activate
    cd AlmanacStack
    ./bin/buildout -vvv
    """ % locals()
    fac.addStep(ToppShellScript, sourcetext=buildout_script,
                descripton = ['Run buildout'],
                haltOnFailure=True)

    # What got built? Useful for forensics.
    pipscript = "easy_install pip && pip freeze"
    fac.addStep(ToppShellScript, sourcetext=pipscript,
                description=["What got built", "for almanac?"],
                haltOnFailure=False, flunkOnFailure=False)
    return fac


# XXX make_factory has too much irrelevant crap
almanac_factory = make_factory(
    'Almanac trunk',
    # XXX buildout, not fassembler reqs
    repo='%s/build/trunk' % SVNURL,
    ports=almanac_ports,
    )


############################################################################
# BUILDERS - each tells a slave which build factory to use.
# Need one per slave per build config.
############################################################################

almanac_builders = [
    {'name': 'almanac',
     'slavename': name,
     'builddir': 'almanac',
     'factory': almanac_factory}
    for name in slavenames]


c['builders'] = almanac_builders

###########################################################################
# SCHEDULERS - control when the master decides to fire off a build.
###########################################################################

buildOnChange = scheduler.Scheduler(
    'Post Commit Build', 
    branch='trunk',
    treeStableTimer=5*60, 
    builderNames=[b['name'] for b in c['builders']]
    )

buildAlmanacNightly = scheduler.Nightly(
    'Almanac Nightly Build', 
    builderNames=[b['name'] for b in c['builders']],
    hour=4, minute=15)

c['schedulers'] = [buildOnChange,
                   buildAlmanacNightly,
                   ]



############################################################################
# STATUS NOTIFICATION
############################################################################


# This is the status display that should be presented to the Universe, 
# hence forcing builds to begin is disabled. 
publicWebStatus = html.WebStatus(http_port='{{config.buildmaster_public_port}}', allowForce=False)

# This is the status display that should be presented to developers 
# only, allowing them to manually force builds, stop builds etc. 
developerWebStatus = html.WebStatus(http_port='{{config.buildmaster_private_port}}', allowForce=True)


# Mails only to the status list.
listMailer = mail.MailNotifier(
    fromaddr='buildbot@openplans.org',
    mode='failing',  # People got annoyed by all the successes.
    subject='%(builder)s FAILURE',
    relayhost='mail.openplans.org',
    lookup='openplans.org',
    sendToInterestedUsers=False,
    extraRecipients=['almanac-builds@lists.openplans.org'], #XXX addr
    )


# Notify by email anyone who has made changes to a build that
# breaks.
breakMailer = mail.MailNotifier(
    fromaddr='buildbot@openplans.org', 
    mode='failing',
    subject='%(builder)s FAILURE, and sadly, you are on the blamelist',
    relayhost='mail.openplans.org', 
    lookup='openplans.org',
    sendToInterestedUsers=True,
    )

# An IRC status bot. Is there a way to get this to always announce
# failures?
# Apparently not, short of giving the bot the 'notify' command in channel.
ircbot = words.IRC(host='irc.freenode.net',
                   nick='buildbot-almanac',
                   channels=['#almanac'],
                   allowForce=False,
                   )

c['status'] = [developerWebStatus,
               publicWebStatus,
               breakMailer,
               listMailer,
               ircbot,
               ]


############################################################################
# write the configuration to a file for debugging.
# XXX first monkeypatch buildslave so it doesn't blow up on repr.
def repr_buildslave(s):
    return '<BuildSlave(%r)' % s.slavename
BuildSlave.__repr__ = repr_buildslave

import pprint
outfile = file('config.out', 'w')
outfile.write(pprint.pformat(c))
outfile.close()
