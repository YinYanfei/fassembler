from buildbot.changes.pb import PBChangeSource
from buildbot.changes.svnpoller import SVNPoller
from buildbot.process import factory
from buildbot.steps.shell import ShellCommand
from buildbot.steps.source import SVN
from buildbot.status import html, mail, words
from buildbot import scheduler
from buildbot.buildslave import BuildSlave

import os
import subprocess

OCBASEPORT=int('{{config.baseport}}')  # The build we make will use this port.
OCBASEDIR='oc'
ENV = os.environ.get('VIRTUAL_ENV') or os.environ.get('WORKINGENV')

slaves = [BuildSlave('slave1', 'PASSWORD')]

c = BuildmasterConfig = {}

c['projectName'] = 'OpenCore'
c['projectURL']  = 'http://www.openplans.org/projects/opencore'
c['buildbotURL'] = 'http://www.openplans.org/buildbot/'

c['slavePortnum'] = int('{{config.buildslave_port}}')

c['change_source'] = [SVNPoller(svnurl='https://svn.openplans.org/svn/opencore/trunk/')]

#
# Build slaves that are allowed to attach
c['slaves'] = slaves

# This is the build factory for building & testing Opencore
# (minimal, not a full stack).
ocf = factory.BuildFactory()


# debug, where are we?
## ocf.addStep(ShellCommand, command='pwd',
##             description='where the heck are we?')
## ocf.addStep(ShellCommand, command='echo $PATH',
##             description=" what's my path?")


# get some stuff we need
# XXX do this in a build script
ocf.addStep(ShellCommand, workdir='%s/bin'  % ENV,
            command = ['svn', 'export',
                       'https://svn.openplans.org/svn/build/topp.build.buildbot/trunk/topp/build/buildbot/skel/bin/accept_certificates.sh'])

# Accept certificates (for svn).
ocf.addStep(ShellCommand,
            command=['%s/bin/accept_certificates.sh' % ENV],
            description='accepting certificates for svn')

# Clean up after previous runs.

## ocf.addStep(ShellCommand, 
##             command=['%s/opencore/bin/superviscorctl shutdown' % OCBASEDIR],
##             description='shut down old stuff',
##             haltOnFailure=0)
ocf.addStep(ShellCommand, command=['rm', '-rf', 'build'],
            description='removing old files')

# Bootstrap the topp build tools (fassembler).
ocf.addStep(ShellCommand,
            command='svn export https://svn.openplans.org/svn/fassembler/trunk/fassembler-boot.py',   # string instead of list causes it to be run via sh.
            description='getting fassembler bootstrap script',
            haltOnFailure=1)

ocf.addStep(ShellCommand,
            command=['python', 'fassembler-boot.py', 'oc'],
            description='bootstrapping fassembler',
            haltOnFailure=1)

# Run the build.
ocf.addStep(ShellCommand,
            command=['%s/bin/fassembler' % OCBASEDIR,
                     '--no-interactive',
                     'var=%s/var' % OCBASEDIR,
                     'base_port=%d' % OCBASEPORT,
                     'fassembler:topp',
                     # Just build enough of the stack to run flunc.
                     'fassembler:supervisor',
                     'fassembler:deliverance',
                     'fassembler:cabochon',
                     'fassembler:opencore',
                     'fassembler:zeo',
                     ],
            description='building opencore and dependencies',
            haltOnFailure=1)

# Run the zopectl unit tests.
# WORKS except that zopectl always exits 0, argh.
ocf.addStep(ShellCommand, 
            command=['%s/opencore/zope/bin/zopectl' % OCBASEDIR, 'test', '-s',
                     'Products.listen'],
            description='run listen unit test suite',
            haltOnFailure=0)

ocf.addStep(ShellCommand,
            command=['%s/opencore/zope/bin/zopectl' % OCBASEDIR, 'test', '-s',
                     'opencore'],
            description='run opencore unit test suite',
            haltOnFailure=1)

# Run the flunc tests.
ocf.addStep(ShellCommand, 
            command=['%s/bin/supervisord' % OCBASEDIR],
            description='start services for functional tests',
            haltOnFailure=1)

ocf.addStep(ShellCommand, 
            command=['%s/opencore/bin/flunc' % OCBASEDIR,
                     '-p', '%s/opencore/src/opencore/ftests/' % OCBASEDIR,
                     '-t', 'http://localhost:%d' % OCBASEPORT,
                     'all'],
            description='run flunc tests',
            haltOnFailure=0)

ocf.addStep(ShellCommand, 
            command=['%s/bin/supervisorctl' % OCBASEDIR,
                     'shutdown'],
            description='shut down',
            haltOnFailure=1)


## # Cleanup.
## # kill any programs running on the ports 
## # this shouldn't be necessary
## ocf.addStep(ShellCommand, 
##           command=['portkill.py', '<<zope-port>>', '<<zeo-port>>'],
##           description='kill any running instances using the ports',
##           haltOnFailure=1)

####################################################################################


# BUILDERS -- should be like the following:
# c['builders'] = [ { 'name':      'test', 
#                     'slavename': 'test-slave',
#                     'builddir':  'linux-x86', 
#                     'factory':   f} ]
c['builders'] = [{'name': 'builder1',
                  'slavename': 'slave1',
                  'builddir': 'builds',
                  'factory': ocf}]

# SCHEDULERS
buildOnChange = scheduler.Scheduler(
    'Post Commit Build', 
    branch=None,
    treeStableTimer=5*60, 
    builderNames=[b['name'] for b in c['builders']]
                                    )
buildNightly  = scheduler.Nightly(
    'Nightly Build', 
    builderNames=[b['name'] for b in c['builders']],
    hour=3, minute=0)

c['schedulers'] = [buildOnChange, buildNightly]



# This is the status display that should be presented to the Universe, 
# hence forcing builds to begin is disabled. 
publicWebStatus = html.WebStatus(http_port='{{config.buildmaster_public_port}}', allowForce=False)

# This is the status display that should be presented to developers 
# only, allowing them to manually force builds, stop builds etc. 
developerWebStatus = html.WebStatus(http_port='{{config.buildmaster_private_port}}', allowForce=True)


## this mailer mails all status only to the nightlies list
listMailer = mail.MailNotifier(
    fromaddr='buildbot@openplans.org',
    subject='buildbot test',
    mode='all', relayhost='mail.openplans.org',
    extraRecipients=['nightlies@lists.openplans.org'],
    sendToInterestedUsers=False)


# This mailer sends an email to anyone who has made changes to a build
# that breaks
breakMailer = mail.MailNotifier(fromaddr='buildbot@openplans.org', 
                                mode='problem', 
                                relayhost='mail.openplans.org', 
                                lookup='openplans.org')

pwMailer = mail.MailNotifier(fromaddr='buildbot@openplans.org',
                             sendToInterestedUsers=False,
                             extraRecipients=['pw@openplans.org'],
                             mode='all', 
                             relayhost='mail.openplans.org', 
                             lookup='openplans.org')


ircbot = words.IRC(host='irc.freenode.net',
                   nick='buildbot-topp',
                   channels=['#openplans'],
                   allowForce=False,
                   )

c['status'] = [developerWebStatus,
               #publicWebStatus,
               pwMailer,
               ircbot,
               ]

# write the configuration to a file for debugging.
# XXX first monkeypatch buildslave so it doesn't blow up on repr.
def repr_buildslave(s):
    return '<BuildSlave(%r)' % s.slavename
BuildSlave.__repr__ = repr_buildslave

import pprint
outfile = file(os.path.join('/home/pw/buildbottest/master', 'config.out'), 'w')
outfile.write(pprint.pformat(c))
outfile.close()
